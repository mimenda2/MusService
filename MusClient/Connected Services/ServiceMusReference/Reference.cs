//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MusClient.ServiceMusReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MusData", Namespace="http://schemas.datacontract.org/2004/07/MusWinService")]
    [System.SerializableAttribute()]
    public partial class MusData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HandUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MusClient.ServiceMusReference.MusTeamData[] MusTeamsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long PointsToWinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoundField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HandUser {
            get {
                return this.HandUserField;
            }
            set {
                if ((object.ReferenceEquals(this.HandUserField, value) != true)) {
                    this.HandUserField = value;
                    this.RaisePropertyChanged("HandUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MusClient.ServiceMusReference.MusTeamData[] MusTeams {
            get {
                return this.MusTeamsField;
            }
            set {
                if ((object.ReferenceEquals(this.MusTeamsField, value) != true)) {
                    this.MusTeamsField = value;
                    this.RaisePropertyChanged("MusTeams");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long PointsToWin {
            get {
                return this.PointsToWinField;
            }
            set {
                if ((this.PointsToWinField.Equals(value) != true)) {
                    this.PointsToWinField = value;
                    this.RaisePropertyChanged("PointsToWin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Round {
            get {
                return this.RoundField;
            }
            set {
                if ((this.RoundField.Equals(value) != true)) {
                    this.RoundField = value;
                    this.RaisePropertyChanged("Round");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MusTeamData", Namespace="http://schemas.datacontract.org/2004/07/MusWinService")]
    [System.SerializableAttribute()]
    public partial class MusTeamData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MusCommon.Enums.MusCard[] CardsUser1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MusCommon.Enums.MusCard[] CardsUser2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GamePointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoundUserName1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoundUserName2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TeamNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserName1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserName2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MusCommon.Enums.MusCard[] CardsUser1 {
            get {
                return this.CardsUser1Field;
            }
            set {
                if ((object.ReferenceEquals(this.CardsUser1Field, value) != true)) {
                    this.CardsUser1Field = value;
                    this.RaisePropertyChanged("CardsUser1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MusCommon.Enums.MusCard[] CardsUser2 {
            get {
                return this.CardsUser2Field;
            }
            set {
                if ((object.ReferenceEquals(this.CardsUser2Field, value) != true)) {
                    this.CardsUser2Field = value;
                    this.RaisePropertyChanged("CardsUser2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GamePoints {
            get {
                return this.GamePointsField;
            }
            set {
                if ((this.GamePointsField.Equals(value) != true)) {
                    this.GamePointsField = value;
                    this.RaisePropertyChanged("GamePoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Points {
            get {
                return this.PointsField;
            }
            set {
                if ((this.PointsField.Equals(value) != true)) {
                    this.PointsField = value;
                    this.RaisePropertyChanged("Points");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundUserName1 {
            get {
                return this.RoundUserName1Field;
            }
            set {
                if ((this.RoundUserName1Field.Equals(value) != true)) {
                    this.RoundUserName1Field = value;
                    this.RaisePropertyChanged("RoundUserName1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoundUserName2 {
            get {
                return this.RoundUserName2Field;
            }
            set {
                if ((this.RoundUserName2Field.Equals(value) != true)) {
                    this.RoundUserName2Field = value;
                    this.RaisePropertyChanged("RoundUserName2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TeamName {
            get {
                return this.TeamNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamNameField, value) != true)) {
                    this.TeamNameField = value;
                    this.RaisePropertyChanged("TeamName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName1 {
            get {
                return this.UserName1Field;
            }
            set {
                if ((object.ReferenceEquals(this.UserName1Field, value) != true)) {
                    this.UserName1Field = value;
                    this.RaisePropertyChanged("UserName1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName2 {
            get {
                return this.UserName2Field;
            }
            set {
                if ((object.ReferenceEquals(this.UserName2Field, value) != true)) {
                    this.UserName2Field = value;
                    this.RaisePropertyChanged("UserName2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceMusReference.IMusService")]
    public interface IMusService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/Login", ReplyAction="http://tempuri.org/IMusService/LoginResponse")]
        string Login(string userName, string gameName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/Login", ReplyAction="http://tempuri.org/IMusService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string userName, string gameName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/GetConnectedUsers", ReplyAction="http://tempuri.org/IMusService/GetConnectedUsersResponse")]
        string[] GetConnectedUsers(string gameName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/GetConnectedUsers", ReplyAction="http://tempuri.org/IMusService/GetConnectedUsersResponse")]
        System.Threading.Tasks.Task<string[]> GetConnectedUsersAsync(string gameName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/CreateTeam", ReplyAction="http://tempuri.org/IMusService/CreateTeamResponse")]
        string CreateTeam(string gameName, string teamName, string[] users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/CreateTeam", ReplyAction="http://tempuri.org/IMusService/CreateTeamResponse")]
        System.Threading.Tasks.Task<string> CreateTeamAsync(string gameName, string teamName, string[] users);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/StartGame", ReplyAction="http://tempuri.org/IMusService/StartGameResponse")]
        string StartGame(string gameName, int pointsToWin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/StartGame", ReplyAction="http://tempuri.org/IMusService/StartGameResponse")]
        System.Threading.Tasks.Task<string> StartGameAsync(string gameName, int pointsToWin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/GetMusData", ReplyAction="http://tempuri.org/IMusService/GetMusDataResponse")]
        MusClient.ServiceMusReference.MusData GetMusData(string gameName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/GetMusData", ReplyAction="http://tempuri.org/IMusService/GetMusDataResponse")]
        System.Threading.Tasks.Task<MusClient.ServiceMusReference.MusData> GetMusDataAsync(string gameName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/GetCards", ReplyAction="http://tempuri.org/IMusService/GetCardsResponse")]
        MusCommon.Enums.MusCard[] GetCards(string gameName, string teamName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/GetCards", ReplyAction="http://tempuri.org/IMusService/GetCardsResponse")]
        System.Threading.Tasks.Task<MusCommon.Enums.MusCard[]> GetCardsAsync(string gameName, string teamName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/ChangeCards", ReplyAction="http://tempuri.org/IMusService/ChangeCardsResponse")]
        MusCommon.Enums.MusCard[] ChangeCards(string gameName, string teamName, string userName, MusCommon.Enums.MusCard[] discarded);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/ChangeCards", ReplyAction="http://tempuri.org/IMusService/ChangeCardsResponse")]
        System.Threading.Tasks.Task<MusCommon.Enums.MusCard[]> ChangeCardsAsync(string gameName, string teamName, string userName, MusCommon.Enums.MusCard[] discarded);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/ChangePoints", ReplyAction="http://tempuri.org/IMusService/ChangePointsResponse")]
        void ChangePoints(string gameName, string teamName, string userName, int points);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/ChangePoints", ReplyAction="http://tempuri.org/IMusService/ChangePointsResponse")]
        System.Threading.Tasks.Task ChangePointsAsync(string gameName, string teamName, string userName, int points);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/ChangeGamePoints", ReplyAction="http://tempuri.org/IMusService/ChangeGamePointsResponse")]
        void ChangeGamePoints(string gameName, string teamName, string userName, int gamePoints);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/ChangeGamePoints", ReplyAction="http://tempuri.org/IMusService/ChangeGamePointsResponse")]
        System.Threading.Tasks.Task ChangeGamePointsAsync(string gameName, string teamName, string userName, int gamePoints);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/ResetRound", ReplyAction="http://tempuri.org/IMusService/ResetRoundResponse")]
        void ResetRound(string gameName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/ResetRound", ReplyAction="http://tempuri.org/IMusService/ResetRoundResponse")]
        System.Threading.Tasks.Task ResetRoundAsync(string gameName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/NextRound", ReplyAction="http://tempuri.org/IMusService/NextRoundResponse")]
        void NextRound(string gameName, string teamName, string userName, int round);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/NextRound", ReplyAction="http://tempuri.org/IMusService/NextRoundResponse")]
        System.Threading.Tasks.Task NextRoundAsync(string gameName, string teamName, string userName, int round);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/FinishGame", ReplyAction="http://tempuri.org/IMusService/FinishGameResponse")]
        void FinishGame(string gameName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/FinishGame", ReplyAction="http://tempuri.org/IMusService/FinishGameResponse")]
        System.Threading.Tasks.Task FinishGameAsync(string gameName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/GetTraces", ReplyAction="http://tempuri.org/IMusService/GetTracesResponse")]
        string[] GetTraces(string gameName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/GetTraces", ReplyAction="http://tempuri.org/IMusService/GetTracesResponse")]
        System.Threading.Tasks.Task<string[]> GetTracesAsync(string gameName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/GetAllUserCards", ReplyAction="http://tempuri.org/IMusService/GetAllUserCardsResponse")]
        MusClient.ServiceMusReference.MusData GetAllUserCards(string gameName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/GetAllUserCards", ReplyAction="http://tempuri.org/IMusService/GetAllUserCardsResponse")]
        System.Threading.Tasks.Task<MusClient.ServiceMusReference.MusData> GetAllUserCardsAsync(string gameName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/ChangeHand", ReplyAction="http://tempuri.org/IMusService/ChangeHandResponse")]
        string ChangeHand(string gameName, string userName, string newHandUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusService/ChangeHand", ReplyAction="http://tempuri.org/IMusService/ChangeHandResponse")]
        System.Threading.Tasks.Task<string> ChangeHandAsync(string gameName, string userName, string newHandUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMusServiceChannel : MusClient.ServiceMusReference.IMusService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MusServiceClient : System.ServiceModel.ClientBase<MusClient.ServiceMusReference.IMusService>, MusClient.ServiceMusReference.IMusService {
        
        public MusServiceClient() {
        }
        
        public MusServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MusServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MusServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MusServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Login(string userName, string gameName, string password) {
            return base.Channel.Login(userName, gameName, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string userName, string gameName, string password) {
            return base.Channel.LoginAsync(userName, gameName, password);
        }
        
        public string[] GetConnectedUsers(string gameName) {
            return base.Channel.GetConnectedUsers(gameName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetConnectedUsersAsync(string gameName) {
            return base.Channel.GetConnectedUsersAsync(gameName);
        }
        
        public string CreateTeam(string gameName, string teamName, string[] users) {
            return base.Channel.CreateTeam(gameName, teamName, users);
        }
        
        public System.Threading.Tasks.Task<string> CreateTeamAsync(string gameName, string teamName, string[] users) {
            return base.Channel.CreateTeamAsync(gameName, teamName, users);
        }
        
        public string StartGame(string gameName, int pointsToWin) {
            return base.Channel.StartGame(gameName, pointsToWin);
        }
        
        public System.Threading.Tasks.Task<string> StartGameAsync(string gameName, int pointsToWin) {
            return base.Channel.StartGameAsync(gameName, pointsToWin);
        }
        
        public MusClient.ServiceMusReference.MusData GetMusData(string gameName, string userName) {
            return base.Channel.GetMusData(gameName, userName);
        }
        
        public System.Threading.Tasks.Task<MusClient.ServiceMusReference.MusData> GetMusDataAsync(string gameName, string userName) {
            return base.Channel.GetMusDataAsync(gameName, userName);
        }
        
        public MusCommon.Enums.MusCard[] GetCards(string gameName, string teamName, string userName) {
            return base.Channel.GetCards(gameName, teamName, userName);
        }
        
        public System.Threading.Tasks.Task<MusCommon.Enums.MusCard[]> GetCardsAsync(string gameName, string teamName, string userName) {
            return base.Channel.GetCardsAsync(gameName, teamName, userName);
        }
        
        public MusCommon.Enums.MusCard[] ChangeCards(string gameName, string teamName, string userName, MusCommon.Enums.MusCard[] discarded) {
            return base.Channel.ChangeCards(gameName, teamName, userName, discarded);
        }
        
        public System.Threading.Tasks.Task<MusCommon.Enums.MusCard[]> ChangeCardsAsync(string gameName, string teamName, string userName, MusCommon.Enums.MusCard[] discarded) {
            return base.Channel.ChangeCardsAsync(gameName, teamName, userName, discarded);
        }
        
        public void ChangePoints(string gameName, string teamName, string userName, int points) {
            base.Channel.ChangePoints(gameName, teamName, userName, points);
        }
        
        public System.Threading.Tasks.Task ChangePointsAsync(string gameName, string teamName, string userName, int points) {
            return base.Channel.ChangePointsAsync(gameName, teamName, userName, points);
        }
        
        public void ChangeGamePoints(string gameName, string teamName, string userName, int gamePoints) {
            base.Channel.ChangeGamePoints(gameName, teamName, userName, gamePoints);
        }
        
        public System.Threading.Tasks.Task ChangeGamePointsAsync(string gameName, string teamName, string userName, int gamePoints) {
            return base.Channel.ChangeGamePointsAsync(gameName, teamName, userName, gamePoints);
        }
        
        public void ResetRound(string gameName) {
            base.Channel.ResetRound(gameName);
        }
        
        public System.Threading.Tasks.Task ResetRoundAsync(string gameName) {
            return base.Channel.ResetRoundAsync(gameName);
        }
        
        public void NextRound(string gameName, string teamName, string userName, int round) {
            base.Channel.NextRound(gameName, teamName, userName, round);
        }
        
        public System.Threading.Tasks.Task NextRoundAsync(string gameName, string teamName, string userName, int round) {
            return base.Channel.NextRoundAsync(gameName, teamName, userName, round);
        }
        
        public void FinishGame(string gameName) {
            base.Channel.FinishGame(gameName);
        }
        
        public System.Threading.Tasks.Task FinishGameAsync(string gameName) {
            return base.Channel.FinishGameAsync(gameName);
        }
        
        public string[] GetTraces(string gameName) {
            return base.Channel.GetTraces(gameName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetTracesAsync(string gameName) {
            return base.Channel.GetTracesAsync(gameName);
        }
        
        public MusClient.ServiceMusReference.MusData GetAllUserCards(string gameName, string userName) {
            return base.Channel.GetAllUserCards(gameName, userName);
        }
        
        public System.Threading.Tasks.Task<MusClient.ServiceMusReference.MusData> GetAllUserCardsAsync(string gameName, string userName) {
            return base.Channel.GetAllUserCardsAsync(gameName, userName);
        }
        
        public string ChangeHand(string gameName, string userName, string newHandUser) {
            return base.Channel.ChangeHand(gameName, userName, newHandUser);
        }
        
        public System.Threading.Tasks.Task<string> ChangeHandAsync(string gameName, string userName, string newHandUser) {
            return base.Channel.ChangeHandAsync(gameName, userName, newHandUser);
        }
    }
}
